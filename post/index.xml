<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on ./own.sh</title><link>https://blog.own.sh/post/</link><description>Recent content in Posts on ./own.sh</description><generator>Hugo -- gohugo.io</generator><language>en-EN</language><managingEditor>blog@own.sh (Joey Lane)</managingEditor><webMaster>blog@own.sh (Joey Lane)</webMaster><copyright>(c) 2018 Joey Lane.</copyright><lastBuildDate>Sat, 20 Jul 2019 12:34:57 -0500</lastBuildDate><atom:link href="https://blog.own.sh/post/index.xml" rel="self" type="application/rss+xml"/><item><title>OSCP/OSCE/OSWP Review</title><link>https://blog.own.sh/oscp-osce-oswp-review/</link><pubDate>Sat, 20 Jul 2019 12:34:57 -0500</pubDate><author>blog@own.sh (Joey Lane)</author><guid>https://blog.own.sh/oscp-osce-oswp-review/</guid><description>It&amp;rsquo;s no secret that Offensive Security offers some of the best technical training in the information security field. Their brand has become synonymous with penetration testing in the eyes of most tech recruiters on LinkedIn.
Some of the most common questions I get on LinkedIn are related to the OSCP/OSCE/OSWP certifications. Some people even go as far as asking for solutions to their exam machines. Sorry, you won&amp;rsquo;t be finding anything like that here (TRY HARDER).</description></item><item><title>Low Interaction Honeypots with Python</title><link>https://blog.own.sh/low-interaction-honeypots-with-python/</link><pubDate>Sat, 06 Apr 2019 12:34:57 -0500</pubDate><author>blog@own.sh (Joey Lane)</author><guid>https://blog.own.sh/low-interaction-honeypots-with-python/</guid><description>Protecting a network can be a difficult task even for experienced security professionals. Even if you follow a strict patch management process, deploy an IDS/IPS solution, run antivirus on all your hosts, and regularly monitor logs and events, there is still always a chance that a skilled attacker could breach your network. Even worse, a careful adversary could potentially remain undetected for a long period of time. There are no shortage of security solutions out there promising to offer the highest level of protection, but realistically any security control can be bypassed under the right circumstances.</description></item><item><title>Introduction to Network Protocol Fuzzing &amp; Buffer Overflow Exploitation</title><link>https://blog.own.sh/introduction-to-network-protocol-fuzzing-buffer-overflow-exploitation/</link><pubDate>Tue, 29 Jan 2019 20:34:57 -0500</pubDate><author>blog@own.sh (Joey Lane)</author><guid>https://blog.own.sh/introduction-to-network-protocol-fuzzing-buffer-overflow-exploitation/</guid><description>In this article we will introduce the fundamentals of discovering and exploiting buffer overflow vulnerabilities in Windows applications. If you have never written an exploit before, this may seem a bit intimidating at first. Perhaps you are pursuing your OSCP certification and have just been introduced to the concept of buffer overflow. I assure you this is not as difficult as it seems. If you dedicate a little bit of time to it, you can learn it!</description></item><item><title>Pwning Bulldog 2 (Walkthrough)</title><link>https://blog.own.sh/pwning-bulldog-2-walkthrough/</link><pubDate>Sun, 23 Sep 2018 23:34:57 -0500</pubDate><author>blog@own.sh (Joey Lane)</author><guid>https://blog.own.sh/pwning-bulldog-2-walkthrough/</guid><description>In this article we will be doing a walkthrough of a really awesome vulnerable VM called Bulldog 2. This was a really fun and challenging boot-to-root VM for a number of reasons. The author Nick Frichette (who is also a co-worker of mine) built the vulnerable application using AngularJS, which gave the VM a much more modern feel than some of the more typical PHP focused vulnerable VMs. I admittedly did not have much experience with AngularJS going into this, so I can honestly say I learned quite a bit.</description></item></channel></rss>