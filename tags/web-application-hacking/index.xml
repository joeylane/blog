<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Web Application Hacking on ./own.sh</title><link>https://blog.own.sh/tags/web-application-hacking/</link><description>Recent content in Web Application Hacking on ./own.sh</description><generator>Hugo -- gohugo.io</generator><language>en-EN</language><managingEditor>blog@own.sh (Joey Lane)</managingEditor><webMaster>blog@own.sh (Joey Lane)</webMaster><copyright>(c) 2018 Joey Lane.</copyright><lastBuildDate>Sun, 23 Sep 2018 23:34:57 -0500</lastBuildDate><atom:link href="https://blog.own.sh/tags/web-application-hacking/index.xml" rel="self" type="application/rss+xml"/><item><title>Pwning Bulldog 2 (Walkthrough)</title><link>https://blog.own.sh/pwning-bulldog-2-walkthrough/</link><pubDate>Sun, 23 Sep 2018 23:34:57 -0500</pubDate><author>blog@own.sh (Joey Lane)</author><guid>https://blog.own.sh/pwning-bulldog-2-walkthrough/</guid><description>In this article we will be doing a walkthrough of a really awesome vulnerable VM called Bulldog 2. This was a really fun and challenging boot-to-root VM for a number of reasons. The author Nick Frichette (who is also a co-worker of mine) built the vulnerable application using AngularJS, which gave the VM a much more modern feel than some of the more typical PHP focused vulnerable VMs. I admittedly did not have much experience with AngularJS going into this, so I can honestly say I learned quite a bit.</description></item></channel></rss>